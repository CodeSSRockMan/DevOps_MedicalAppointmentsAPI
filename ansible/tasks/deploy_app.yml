# Step 1: Use DATABASE_URL directly from the set_fact
- name: Log - DATABASE_URL already available from fetch_env.yml
  debug:
    msg: "DATABASE_URL: {{ DATABASE_URL }}"

# Step 1.5: Ensure app directory exists
- name: Ensure app directory exists
  file:
    path: "{{ app_dir }}"
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0755'
  become: true

# Step 2: Create .env file for Flask app
- name: Create .env file for Flask app
  copy:
    dest: "{{ env_file_path }}"
    content: |
      DATABASE_URL={{ DATABASE_URL }}
      DEBUG=True
  no_log: false


# Step 3: Clone the repository (same as before)
- name: Log - Cloning the Flask app repository
  debug:
    msg: "Cloning the application repository into {{ app_dir }}..."

- name: Clone the repository
  git:
    repo: "{{ app_repo }}"
    dest: "{{ app_dir }}"
    version: rollback-a380589
    force: yes

# Step 4: Stop and remove any previous Docker container
- name: Log - Stopping and removing old Docker container
  debug:
    msg: "Stopping and removing any previous Docker container..."

- name: Stop and remove previous Docker container
  docker_container:
    name: "{{ docker_container_name }}"
    state: absent
    force_kill: true
# Step 5: Copy SQL schema to the EC2
- name: Log - Copying SQL schema file to EC2
  debug:
    msg: "Copying create_db.sql to {{ app_dir }}/create_db.sql..."

- name: Copy SQL schema to EC2
  copy:
    src: files/create_db.sql
    dest: "{{ app_dir }}/create_db.sql"
    mode: '0644'

# Step 6: Execute SQL to create DB and table in RDS
- name: Log - Executing SQL script to create database and tables
  debug:
    msg: "Creating DB and table using create_db.sql in {{ app_dir }}..."

- name: Create DB and tables in RDS
  shell: >
    mysql -h "{{ rds_host }}" -u "{{ rds_user }}" -p"{{ rds_password }}" < {{ app_dir }}/create_db.sql
  args:
    executable: /bin/bash
    
# Step 5: Build the Docker image for Flask app
- name: Log - Building Docker image for the Flask app
  debug:
    msg: "Building Docker image from {{ app_dir }}..."

- name: Build Docker image
  docker_image:
    name: "{{ docker_image_name }}"
    source: build
    build:
      path: "{{ app_dir }}"
      nocache: yes

# Step 6: Start the Docker container
- name: Log - Starting Docker container with Flask app
  debug:
    msg: "Running Docker container on port 80 mapped to 5000 inside..."

- name: Run Docker container
  docker_container:
    name: "{{ docker_container_name }}"
    image: "{{ docker_image_name }}"
    state: started
    restart_policy: always
    ports:
      - "80:5000"
    env_file: "{{ env_file_path }}"  # Inject the .env file containing DATABASE_URL
