pipeline {
    agent any

    environment {
        TF_DIR = 'terraform'
        PLAN_OUT = 'tfplan.out'
        PLAN_SUMMARY = 'tfplan-summary.txt'
    }

    options {
        timestamps()
    }

    stages {

        stage('Cleanup Before Checkout') {
            steps {
                deleteDir()
            }
        }

        stage('Checkout') {
            steps {
                echo "[INFO] Checking out repository..."
                checkout scm
            }
        }

        stage('Terraform Init') {
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials'],
                    [$class: 'StringBinding', credentialsId: 'terraform-cloud-token', variable: 'TERRAFORM_CLOUD_TOKEN']
                ]) {
                    dir("${TF_DIR}") {
                        echo "[DEBUG] Initializing Terraform..."
                        sh '''
                          rm -rf .terraform
                          terraform init -input=false
                        '''
                    }
                }
            }
        }

        stage('Terraform Validate & Format') {
            steps {
                dir("${TF_DIR}") {
                    echo "[DEBUG] Formatting and validating Terraform code..."
                    sh 'terraform fmt -check'
                    sh 'terraform validate'
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']
                ]) {
                    dir("${TF_DIR}") {
                        echo "[DEBUG] Running Terraform plan..."
                        sh '''
                            export TF_CLI_ARGS_plan="-input=false -lock=false -no-color"
                            export TF_IN_AUTOMATION=true
                            export TF_CLOUD=false
                            terraform plan | tee ${PLAN_SUMMARY}
                            
                            if grep -q "No changes. Infrastructure is up-to-date." ${PLAN_SUMMARY}; then
                                echo "NO_CHANGES=true" > ../.terraform_result
                            else
                                echo "NO_CHANGES=false" > ../.terraform_result
                            fi
                        '''
                    }
                }
            }
        }

    stage('Terraform Apply') {
        when {
            expression {
                return currentBuild.currentResult == 'SUCCESS'
            }
        }
        steps {
            withCredentials([
                [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']
            ]) {
                dir("${TF_DIR}") {
                    echo "[INFO] Applying Terraform changes..."
                    // Ejecutamos apply y si falla, hacemos destroy
                    sh '''
                        export TF_IN_AUTOMATION=true
                        export TF_CLOUD=false
                        
                        echo "[INFO] Running terraform apply..."
                        if ! terraform apply -auto-approve; then
                        echo "[ERROR] Terraform apply failed. Executing terraform destroy..."
                        terraform destroy -auto-approve || echo "[ERROR] Terraform destroy also failed!"
                        exit 1
                        fi
                    '''
                }
            }
        }
    }

        stage('Terraform Output') {
            steps {
                dir("${TF_DIR}") {
                    echo "[DEBUG] Displaying Terraform output..."
                    sh 'terraform output -json'
                }
            }
        }

        stage('Cleanup') {
            steps {
                echo "[INFO] Cleaning up workspace..."
                cleanWs()
            }
        }
    }

    post {
        success {
            echo "[SUCCESS] Terraform plan pipeline completed successfully."
        }
        failure {
            echo "[FAILURE] Terraform plan pipeline failed. See logs for details."
        }
        always {
            echo "[FINAL] Pipeline finished with status: ${currentBuild.result}"
            cleanWs()
        }
    }
}
