pipeline {
    agent any

    environment {
        TF_DIR = 'terraform'
        TF_PLAN_OUTPUT = 'tfplan.out'
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "[DEBUG] Checking out code..."
                checkout scm
            }
        }

        stage('Detect Terraform File Changes') {
            when {
                changeset "**/*.tf", "**/*.tfvars"
            }
            steps {
                echo "[DEBUG] Terraform-related files changed. Proceeding with pipeline."
            }
        }

        stage('No Terraform Changes Detected') {
            when {
                not {
                    changeset "**/*.tf", "**/*.tfvars"
                }
            }
            steps {
                echo "[INFO] No .tf or .tfvars files were changed. Skipping infrastructure pipeline."
            }
        }

        stage('Terraform Init') {
            when {
                changeset "**/*.tf", "**/*.tfvars"
            }
            steps {
                dir("${TF_DIR}") {
                    script {
                        try {
                            echo "[DEBUG] Running terraform init..."
                            sh 'terraform init'
                        } catch (Exception e) {
                            error "[ERROR] terraform init failed: ${e.getMessage()}"
                        }
                    }
                }
            }
        }

        stage('Terraform Format and Validate') {
            when {
                changeset "**/*.tf", "**/*.tfvars"
            }
            steps {
                dir("${TF_DIR}") {
                    script {
                        try {
                            echo "[DEBUG] Running terraform fmt and validate..."
                            sh 'terraform fmt -check'
                            sh 'terraform validate'
                        } catch (Exception e) {
                            error "[ERROR] terraform fmt or validate failed: ${e.getMessage()}"
                        }
                    }
                }
            }
        }

        stage('Terraform Plan') {
            when {
                changeset "**/*.tf", "**/*.tfvars"
            }
            steps {
                dir("${TF_DIR}") {
                    script {
                        try {
                            echo "[DEBUG] Executing terraform plan..."
                            sh "terraform plan -out=${TF_PLAN_OUTPUT} -var-file=terraform.tfvars"
                        } catch (Exception e) {
                            error "[ERROR] terraform plan failed: ${e.getMessage()}"
                        }
                    }
                }
            }
        }

        stage('Terraform Apply') {
            when {
                allOf {
                    branch 'test-infra'
                    changeset "**/*.tf", "**/*.tfvars"
                    expression {
                        // Verificar si el archivo de plan contiene cambios
                        def planOutput = sh(
                            script: "terraform show -no-color ${TF_DIR}/${TF_PLAN_OUTPUT} | grep -E '^  #|^  +' || true",
                            returnStdout: true
                        ).trim()
                        return planOutput != ''
                    }
                }
            }
            steps {
                dir("${TF_DIR}") {
                    script {
                        try {
                            echo "[DEBUG] Applying terraform plan..."
                            sh "terraform apply -auto-approve ${TF_PLAN_OUTPUT}"
                        } catch (Exception e) {
                            error "[ERROR] terraform apply failed: ${e.getMessage()}"
                        }
                    }
                }
            }
        }

        stage('No Infra Changes in Plan') {
            when {
                allOf {
                    branch 'test-infra'
                    changeset "**/*.tf", "**/*.tfvars"
                    expression {
                        def planOutput = sh(
                            script: "terraform show -no-color ${TF_DIR}/${TF_PLAN_OUTPUT} | grep -E '^  #|^  +' || true",
                            returnStdout: true
                        ).trim()
                        return planOutput == ''
                    }
                }
            }
            steps {
                echo "[INFO] terraform plan did not detect infrastructure changes. Skipping apply."
            }
        }
    }

    post {
        success {
            echo "[INFO] Infrastructure pipeline completed successfully."
        }
        failure {
            echo "[ERROR] Infrastructure pipeline failed."
        }
    }
}
