pipeline {
  agent any

  environment {
    APP_DIR = '/opt/app'
    VENV_DIR = '/opt/app/.venv'
    DB_PASSWORD_PARAM = '/rds/mysql/password'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Debug Inventory') {
  steps {
    sh '''
      echo "üìÇ Checking hosts files..."
      ls -la ansible/inventory
      cat ansible/inventory/hosts
    '''
  }
}

    stage('Run Ansible Playbook') {
      steps {
        echo 'üîß Running Ansible playbook...'
        sh '''
          set -e
          ansible-playbook -i ansible/inventory/hosts ansible/playbook.yml
        '''
      }
    }

    stage('Build Docker Image') {
      steps {
        dir('app') {
          sh '''
            set -e
            echo "üî® Building Docker image..."
            docker build -t medical-app:latest .
          '''
        }
      }
    }

    stage('Run Docker Container') {
      steps {
        sh '''
          set -e
          echo "üöÄ Running Docker container..."

          if docker ps -a --format '{{.Names}}' | grep -Eq '^medical-app$'; then
            echo "Stopping existing container..."
            docker stop medical-app || true
            docker rm medical-app || true
          fi

          docker run -d --name medical-app \
            -p 80:5000 \
            -e DB_PASSWORD=$(aws ssm get-parameter --name ${DB_PASSWORD_PARAM} --with-decryption --query Parameter.Value --output text) \
            medical-app:latest
        '''
      }
    }
  }

  post {
    always {
      echo 'üßπ Cleaning workspace...'
      cleanWs()
    }
    failure {
      echo '‚ùå Pipeline failed. Please check logs above.'
    }
    success {
      echo '‚úÖ Deployment completed successfully!'
    }
  }
}
